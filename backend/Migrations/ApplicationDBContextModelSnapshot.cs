// <auto-generated />
using System;
using Backend.Db_tables;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Db_tables.Fahrzeuge", b =>
                {
                    b.Property<int>("IdCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCar"));

                    b.Property<DateTime?>("DatumVonKauf")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Farbe")
                        .HasColumnType("text");

                    b.Property<int>("IdOrt")
                        .HasColumnType("integer");

                    b.Property<string>("Kennzeichnung")
                        .HasColumnType("text");

                    b.Property<string>("Marke")
                        .HasColumnType("text");

                    b.Property<string>("Typ")
                        .HasColumnType("text");

                    b.HasKey("IdCar");

                    b.HasIndex("IdOrt");

                    b.ToTable("Fahrzeuge");
                });

            modelBuilder.Entity("Backend.Db_tables.Formular", b =>
                {
                    b.Property<int>("IdForm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdForm"));

                    b.Property<TimeSpan?>("EndZeit")
                        .HasColumnType("interval");

                    b.Property<DateTime>("Enddatum")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GrundDerBuchung")
                        .HasColumnType("text");

                    b.Property<int>("IdCar")
                        .HasColumnType("integer");

                    b.Property<int>("IdManager")
                        .HasColumnType("integer");

                    b.Property<int>("IdOrt")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<string>("NameVonManager")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("StartZeit")
                        .HasColumnType("interval");

                    b.Property<DateTime>("Startdatum")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("IdForm");

                    b.HasIndex("IdCar");

                    b.HasIndex("IdManager");

                    b.HasIndex("IdOrt");

                    b.HasIndex("IdUser");

                    b.ToTable("Formular");
                });

            modelBuilder.Entity("Backend.Db_tables.Rolle", b =>
                {
                    b.Property<int>("IdRolle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRolle"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("IdRolle");

                    b.ToTable("Rollen");
                });

            modelBuilder.Entity("Backend.Db_tables.Standort", b =>
                {
                    b.Property<int>("IdOrt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdOrt"));

                    b.Property<string>("Ort")
                        .HasColumnType("text");

                    b.HasKey("IdOrt");

                    b.ToTable("Standorte");
                });

            modelBuilder.Entity("Backend.Db_tables.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUser"));

                    b.Property<int>("IdRolle")
                        .HasColumnType("integer");

                    b.Property<string>("Nachname")
                        .HasColumnType("text");

                    b.Property<string>("Vorname")
                        .HasColumnType("text");

                    b.HasKey("IdUser");

                    b.HasIndex("IdRolle");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Db_tables.Fahrzeuge", b =>
                {
                    b.HasOne("Backend.Db_tables.Standort", "Standort")
                        .WithMany("Fahrzeuge")
                        .HasForeignKey("IdOrt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Standort");
                });

            modelBuilder.Entity("Backend.Db_tables.Formular", b =>
                {
                    b.HasOne("Backend.Db_tables.Fahrzeuge", "Fahrzeuge")
                        .WithMany()
                        .HasForeignKey("IdCar")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Db_tables.User", "Manager")
                        .WithMany()
                        .HasForeignKey("IdManager")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Db_tables.Standort", "Standort")
                        .WithMany()
                        .HasForeignKey("IdOrt")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Db_tables.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fahrzeuge");

                    b.Navigation("Manager");

                    b.Navigation("Standort");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Db_tables.User", b =>
                {
                    b.HasOne("Backend.Db_tables.Rolle", "Rolle")
                        .WithMany("Users")
                        .HasForeignKey("IdRolle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rolle");
                });

            modelBuilder.Entity("Backend.Db_tables.Rolle", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend.Db_tables.Standort", b =>
                {
                    b.Navigation("Fahrzeuge");
                });
#pragma warning restore 612, 618
        }
    }
}
